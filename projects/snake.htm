<!DOCTYPE html>
<html><!--
   This web page shows how to do a simple animation using 2D canvas graphics.
   It also defines functions applyWindowtoViewportTransformation, for setting
   up a coordinate system on the canvas, and addGraphicsContextExtras, for adding
   some extra drawing functions to a graphics context, such as functions for drawing
   lines and ovals.  Use this page as a basis for experimenting with animation.
--><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Snake</title>
</head>
<style>
    body {
        background-color: #666a72;
        color: white;
    }
    #canvasholder {
        margin: auto;
    }
    canvas {
        background-color: #9da5b2;
    }
</style>

<script>

    "use strict";  // gives improved error-checking in scripts.

    var canvas;    // The canvas element on which we will draw.
    var graphics;  // A 2D graphics context for drawing on the canvas.

    var elapsedTimeMillis;  // This will be the time since the animation started;
                            // will be zero in the first frame.

    var imLoads = [false, false, false];
    var frameNumber;
    var startTime;
    var directionVector = [30, 0];
    var moveLock = false;

    var snake1 = [];

    var foods = [];
    var score = 4;
    var speed = 6; //controls how often in frames the drawing, etc. is done

    var image;
    var image2;
    var image3;

    //---------------------------------------------------------------------------
    //draw(): draws snake movement and food
    //---------------------------------------------------------------------------
    function draw() {
      graphics.clearRect(0,0,canvas.width,canvas.height);  // Clear the canvas, so it shows its background color.

      //draw snake body
      for(var i = 0; i < snake1.length-1; i++){
        snake1[i][0] = snake1[i+1][0];
        snake1[i][1] = snake1[i+1][1];
        graphics.drawImage(image, snake1[i][0], snake1[i][1], 30, 40);
      }
      //draw snake head
      snake1[snake1.length-1][0] = snake1[snake1.length-1][0] + directionVector[0];
      snake1[snake1.length-1][1] = snake1[snake1.length-1][1] + directionVector[1];
      graphics.drawImage(image, snake1[snake1.length-1][0], snake1[snake1.length-1][1], 30, 40);

      graphics.drawImage(image3, foods[0], foods[1], 30, 40); //first food item
      graphics.drawImage(image3, foods[2], foods[3], 30, 40); //second food item
    }

    //---------------------------------------------------------------------------
    //checkCollision(): checks for collision, returns true if there is
    //---------------------------------------------------------------------------
    function checkCollision(){
      var collision = false;

      //check collision against wall
      if(snake1[snake1.length-1][0] == 600 || snake1[snake1.length-1][0] == -30 || snake1[snake1.length-1][1] == 800 || snake1[snake1.length-1][1] == -40)
        collision = true;

      //check for collision with self
      for(var i = 0; i < snake1.length-2; i++){
        if(snake1[snake1.length-1][0] == snake1[i][0] && snake1[snake1.length-1][1] == snake1[i][1]){
          collision = true;
          graphics.drawImage(image2, snake1[i][0], snake1[i][1], 30, 40);
        }
      }

      return collision;
    }

    //---------------------------------------------------------------------------
    //checkFood(): checks for collision with food and adds to snake if so
    //---------------------------------------------------------------------------
    function checkFood(){
      var currentx = snake1[snake1.length-1][0];
      var currenty = snake1[snake1.length-1][1];

      if(snake1[snake1.length-1][0] == foods[0] && snake1[snake1.length-1][1] == foods[1]){
        foods[0] = (Math.floor(Math.random() * 20)*30);
        foods[1] = (Math.floor(Math.random() * 20)*40);

        snake1.push([currentx, currenty]);
        score++;
        document.getElementById("score").innerHTML = ("Score: " + score);
      }

      if(snake1[snake1.length-1][0] == foods[2] && snake1[snake1.length-1][1] == foods[3]){
        foods[2] = (Math.floor(Math.random() * 20)*30);
        foods[3] = (Math.floor(Math.random() * 20)*40);

        snake1.push([currentx, currenty]);
        score++;
        document.getElementById("score").innerHTML = ("Score: " +score);
      }
    }

    //---------------------------------------------------------------------------
    //doKeyDown(): Handles pressing of key
    //---------------------------------------------------------------------------
    function doKeyDown(evt) {
        var code = evt.keyCode;  // Numerical code for key that was pressed.
        switch (code) {
		case 37:  // left arrow key
        if(directionVector[1] == 0 || moveLock)
          break;
        directionVector[0] = -30;
        directionVector[1] = 0;
        moveLock = true;
		    break;
		case 39:  // right arrow key
        if(directionVector[1] == 0 || moveLock)
          break;
        directionVector[0] = 30;
        directionVector[1] = 0;
        moveLock = true;
		    break;
		case 38:  // up arrow key
        if(directionVector[0] == 0 || moveLock)
          break;
        directionVector[0] = 0;
        directionVector[1] = -40;
        moveLock = true;
		    break;
		case 40:  // down arrow key
        if(directionVector[0] == 0 || moveLock)
          break;
        directionVector[0] = 0;
        directionVector[1] = 40;
        moveLock = true;
		    break;
    case 32:
        if(speed == 6)
          speed = 3;

        else if(speed == 3)
          speed = 6;
        console.log(speed);
        break;
        }
    }

    //---------------------------------------------------------------------------
    //doFrame():
    //---------------------------------------------------------------------------
    function doFrame() {
        frameNumber++;
        elapsedTimeMillis = Date.now() - startTime;

		// GAME LOGIC here
        if(frameNumber % speed == 0){
          draw();
          if(checkCollision())
            return;
          checkFood();
          moveLock = false;
        }
        requestAnimationFrame(doFrame);
    }
    //---------------------------------------------------------------------------
    //imageLoaded():  called when images loaded
    //---------------------------------------------------------------------------
    function imageLoaded(index) {
		    imLoads[index] = true;
    }

    //---------------------------------------------------------------------------
    //init(): - Called when HTML page loads
    //        - canvas context get initialized
    //        - Images loaded
    //        - keyboard handler initialized
    //        - game loop setup
    //---------------------------------------------------------------------------
    function init() {
        try {
            canvas = document.getElementById("canvas");
            graphics = canvas.getContext("2d");

        } catch(e) {
            document.getElementById("canvasholder").innerHTML =
               "Canvas graphics is not supported.<br>" +
               "An error occurred while initializing graphics.";
        }

        snake1.push([0,0]);
        snake1.push([30,0]);
        snake1.push([60,0]);
        snake1.push([90,0]);

        foods.push([(Math.floor(Math.random() * 20)*30)], [(Math.floor(Math.random() * 20)*40)], [(Math.floor(Math.random() * 20)*30)], [(Math.floor(Math.random() * 20)*40)]);

        document.getElementById("score").innerHTML = ("Score: " + score);

    		image = new Image(60, 45);   // using optional size for image
        image2 = new Image(60, 45);
        image3 = new Image(60, 45);

        image.src = 'https://openclipart.org/image/100px/svg_to_png/26901/led-circle-blue.png&disposition=attachment';
        image2.src = 'https://openclipart.org/image/100px/svg_to_png/26906/led-circle-red.png'
        image3.src ='https://openclipart.org/image/100px/svg_to_png/30439/led-square-green.png'

    		image.onload = imageLoaded(0);
        image2.onload = imageLoaded(1);
        image3.onload = imageLoaded(2);
    		while(!imLoads[0] || !imLoads[1] || !imLoads[2]) { } // very risky

    		// GAME INIT

    		// handle keyboard
        document.addEventListener("keydown", doKeyDown, false);

        frameNumber = 0;
        elapsedTimeMillis = 0;
        startTime = Date.now();  // current time, in milliseconds.
        draw();  // Call draw() to draw on the canvas.
        if (!window.requestAnimationFrame) { // This is for Internet Explorer 9
            window.requestAnimationFrame = function(callback) {
                setTimeout(callback, 1000/60);
            }
        }
        requestAnimationFrame(doFrame);
    }

</script>
</head>
<body onload="init()"> <!-- the onload attribute here is what calls the init() function -->

<h2>Snake</h2>
<p id="score"></p>
<p> Arrow keys to conrol --  Space-bar to change speed </p>
<noscript>
    &lt;!-- This message will be shown in the page if JavaScript is not available. --&gt;
&lt;p&gt;JavaScript is required to use this page.&lt;/p&gt;
</noscript>

<div id="canvasholder">
<canvas id="canvas" width="600" height="800">
    <!-- This message is shown on the page if the browser doesn't support the canvas element. -->
Canvas not supported.
</canvas>
</div>



</body></html>
